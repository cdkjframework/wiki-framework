<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--这里的namespace必须和是对应的mapper.java的地址-->
<mapper namespace="com.cdkjframework.core.business.mapper.GenerateMapper">

    <resultMap id="dataBaseResultMap" type="com.cdkjframework.entity.generate.template.DatabaseEntity">
        <result property="tableSchema" column="table_schema"/>
    </resultMap>

    <resultMap id="tableResultMap" type="com.cdkjframework.entity.generate.template.TableEntity">
        <result property="tableName" column="table_name"/>
        <result property="tableComment" column="table_comment"/>
        <result property="tableSchema" column="table_schema"/>
    </resultMap>

    <resultMap id="columnResultMap" type="com.cdkjframework.entity.generate.template.TableColumnEntity">
        <result property="columnName" column="column_name"/>
        <result property="columnComment" column="column_comment"/>
        <result property="columnKey" column="column_key"/>
        <result property="dataType" column="data_type"/>
        <result property="characterMaximumLength" column="character_maximum_length"/>
        <result property="columnDefault" column="column_default"/>
        <result property="isNullable" column="is_nullable"/>
        <result property="tableName" column="table_name"/>
        <result property="tableSchema" column="table_schema"/>
    </resultMap>

    <select id="findDatabase" resultMap="dataBaseResultMap">
        SELECT database() AS table_schema;
    </select>
    <select id="findDatabaseByPostgre" resultMap="dataBaseResultMap">
        SELECT current_database() AS table_schema;
    </select>
    <select id="findDatabaseByMsSql" resultMap="dataBaseResultMap">
        SELECT TOP 1 NAME AS table_schema
        from sysdatabases
    </select>

    <select id="findDatabaseList" resultMap="dataBaseResultMap">
        SELECT table_schema
        FROM information_schema.tables
        GROUP BY table_schema
    </select>
    <select id="findDatabaseListByPostgre" resultMap="dataBaseResultMap">
        SELECT current_database() AS table_schema;
    </select>

    <select id="findDatabaseListByMsSql" resultMap="dataBaseResultMap">
        SELECT NAME AS table_schema
        from sysdatabases
    </select>

    <select id="findDatabaseTableList" resultMap="tableResultMap"
            parameterType="com.cdkjframework.entity.generate.template.TableEntity">
        SELECT
        table_name,
        table_comment,
        table_schema
        FROM
        information_schema.tables
        <where>
            <if test="tableSchema != null and tableSchema != ''">
                table_schema = #{tableSchema}
            </if>
        </where>
    </select>

    <select id="findDatabaseTableListByPostgre" resultMap="tableResultMap"
            parameterType="com.cdkjframework.entity.generate.template.TableEntity">
        SELECT
            tablename AS table_name,
            '' AS table_comment,
            '' AS table_schema
        FROM
            pg_tables
        WHERE
            schemaname = 'public';
    </select>
    <select id="findDatabaseTableListByMsSql" resultMap="tableResultMap"
            parameterType="com.cdkjframework.entity.generate.template.TableEntity">
        USE
        ${tableSchema};
        SELECT NAME AS tableName, '' AS tableComment, ${tableSchema} AS tableSchema
        FROM sysobjects
        WHERE xtype = 'u'
    </select>

    <select id="findTableColumnList" resultMap="columnResultMap"
            parameterType="com.cdkjframework.entity.generate.template.TableColumnEntity">
        SELECT
        column_name,
        column_comment,
        column_key,
        data_type,
        character_maximum_length,
        column_default,
        is_nullable,
        table_name,
        table_schema
        FROM
        information_schema.columns
        WHERE
        table_name = #{tableName}
        <if test="tableSchema != null and tableSchema != ''">
            AND table_schema = #{tableSchema}
        </if>
    </select>

    <select id="findTableColumnListByPostgre" resultMap="columnResultMap"
            parameterType="com.cdkjframework.entity.generate.template.TableColumnEntity">
        SELECT NULL          AS column_key,
               A.attname     AS COLUMN_NAME,
               T.typname     AS data_type,
               A.attlen      AS character_maximum_length,
               A.atttypmod   AS lengthvar,
               A.attnotnull  AS is_nullable,
               b.description AS column_comment,
               C.relname     AS TABLE_NAME
        FROM pg_class C,
             pg_attribute A
                 LEFT OUTER JOIN pg_description b ON A.attrelid = b.objoid
                 AND A.attnum = b.objsubid,
             pg_type T
        WHERE C.relname = #{tableName}
          AND A.attnum > 0
          AND A.attrelid = C.oid
          AND A.atttypid = T.oid
        ORDER BY A.attnum;
    </select>

    <select id="findTableColumnListByMsSql" resultMap="columnResultMap"
            parameterType="com.cdkjframework.entity.generate.template.TableColumnEntity">
        SELECT
        t.name AS table_name,
        c.name AS column_name,
        p.value AS column_comment,
        so.xtype AS column_key,
        sc.is_nullable,
        sc.table_catalog AS table_schema,
        sc.data_type,
        sc.character_maximum_length,
        sc.column_default
        FROM
        sys.tables t
        INNER JOIN sys.columns c ON c.object_id = t.object_id
        LEFT JOIN sys.extended_properties p ON p.major_id = c.object_id
        AND p.minor_id = c.column_id
        LEFT JOIN sysobjects so ON so.parent_obj = c.object_id
        AND so.uid = c.column_id
        LEFT JOIN information_schema.columns sc ON sc.Table_Name = t.name
        AND sc.COLUMN_NAME = c.name
        WHERE
        t.name = #{ tableName }
        <if test="tableSchema != null and tableSchema != ''">
            AND sc.table_catalog = #{ tableSchema };
        </if>
    </select>
</mapper>